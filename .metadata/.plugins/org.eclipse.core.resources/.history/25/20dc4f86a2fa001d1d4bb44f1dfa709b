package comm.octest.security;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.util.Base64;

import javax.crypto.Cipher;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.google.gson.Gson;

/**
 * Servlet implementation class DecryptMessage
 */
@WebServlet("/DecryptMessage")
public class DecryptMessage extends HttpServlet {
	private static final long serialVersionUID = 1L;
       
    /**
     * @see HttpServlet#HttpServlet()
     */
    public DecryptMessage() {
        super();
        // TODO Auto-generated constructor stub
    }

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		response.getWriter().append("Served at: ").append(request.getContextPath());
	}

	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		System.out.println("ana dkhult +++++++++++++++++++++++++++++++++++++");
        KeyPairGenerator keyPairGenerator;
        try {
            String message = request.getParameter("message");
            String publicKey = request.getParameter("publicKey");
            keyPairGenerator = KeyPairGenerator.getInstance("RSA");
            keyPairGenerator.initialize(2048);
            KeyPair senderKeyPair = keyPairGenerator.generateKeyPair();

            Cipher cipher = Cipher.getInstance("RSA");
            cipher.init(Cipher.DECRYPT_MODE, senderKeyPair.getPrivate());    
            byte[] decryptedMessage = cipher.doFinal(message.getBytes());
            
            ByteArrayOutputStream byteOut = new ByteArrayOutputStream();
            ObjectOutputStream objectOut = new ObjectOutputStream(byteOut);
            objectOut.writeObject(senderKeyPair.getPublic());
            objectOut.close();
            byte[] publicKeyBytes = byteOut.toByteArray();
            String publicKeyString = Base64.getEncoder().encodeToString(publicKeyBytes);
            String encryptedMessageString = Base64.getEncoder().encodeToString(encryptedMessage);
            
            Gson gson = new Gson();
            MessageAndKey msgAndKey = new MessageAndKey(encryptedMessageString, publicKeyString);
            String json = gson.toJson(msgAndKey);
            
            response.getWriter().write(json);
        } catch (Exception e) {
            e.printStackTrace();
        }
		
	}

}
